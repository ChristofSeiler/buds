/*
    buds is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    buds is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with buds.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_buds_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_buds");
    reader.add_event(57, 55, "end", "model_buds");
    return reader;
}

#include <meta_header.hpp>
 class model_buds : public prob_grad {
private:
    int N;
    int Npairs;
    vector<int> i_idx;
    vector<int> j_idx;
    row_vector_d dvec;
    row_vector_d rel_sd;
    double gamma_tau;
    double gamma_bias;
    double gamma_rho;
    double gamma_epsilon;
    double min_sigma;
public:
    model_buds(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_buds(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_buds_namespace::model_buds";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "Npairs", "int", context__.to_vec());
            Npairs = int(0);
            vals_i__ = context__.vals_i("Npairs");
            pos__ = 0;
            Npairs = vals_i__[pos__++];
            current_statement_begin__ = 10;
            validate_non_negative_index("i_idx", "Npairs", Npairs);
            context__.validate_dims("data initialization", "i_idx", "int", context__.to_vec(Npairs));
            validate_non_negative_index("i_idx", "Npairs", Npairs);
            i_idx = std::vector<int>(Npairs,int(0));
            vals_i__ = context__.vals_i("i_idx");
            pos__ = 0;
            size_t i_idx_limit_0__ = Npairs;
            for (size_t i_0__ = 0; i_0__ < i_idx_limit_0__; ++i_0__) {
                i_idx[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("j_idx", "Npairs", Npairs);
            context__.validate_dims("data initialization", "j_idx", "int", context__.to_vec(Npairs));
            validate_non_negative_index("j_idx", "Npairs", Npairs);
            j_idx = std::vector<int>(Npairs,int(0));
            vals_i__ = context__.vals_i("j_idx");
            pos__ = 0;
            size_t j_idx_limit_0__ = Npairs;
            for (size_t i_0__ = 0; i_0__ < j_idx_limit_0__; ++i_0__) {
                j_idx[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("dvec", "Npairs", Npairs);
            context__.validate_dims("data initialization", "dvec", "row_vector_d", context__.to_vec(Npairs));
            validate_non_negative_index("dvec", "Npairs", Npairs);
            dvec = row_vector_d(static_cast<Eigen::VectorXd::Index>(Npairs));
            vals_r__ = context__.vals_r("dvec");
            pos__ = 0;
            size_t dvec_i_vec_lim__ = Npairs;
            for (size_t i_vec__ = 0; i_vec__ < dvec_i_vec_lim__; ++i_vec__) {
                dvec[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("rel_sd", "Npairs", Npairs);
            context__.validate_dims("data initialization", "rel_sd", "row_vector_d", context__.to_vec(Npairs));
            validate_non_negative_index("rel_sd", "Npairs", Npairs);
            rel_sd = row_vector_d(static_cast<Eigen::VectorXd::Index>(Npairs));
            vals_r__ = context__.vals_r("rel_sd");
            pos__ = 0;
            size_t rel_sd_i_vec_lim__ = Npairs;
            for (size_t i_vec__ = 0; i_vec__ < rel_sd_i_vec_lim__; ++i_vec__) {
                rel_sd[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "gamma_tau", "double", context__.to_vec());
            gamma_tau = double(0);
            vals_r__ = context__.vals_r("gamma_tau");
            pos__ = 0;
            gamma_tau = vals_r__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "gamma_bias", "double", context__.to_vec());
            gamma_bias = double(0);
            vals_r__ = context__.vals_r("gamma_bias");
            pos__ = 0;
            gamma_bias = vals_r__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "gamma_rho", "double", context__.to_vec());
            gamma_rho = double(0);
            vals_r__ = context__.vals_r("gamma_rho");
            pos__ = 0;
            gamma_rho = vals_r__[pos__++];
            current_statement_begin__ = 19;
            context__.validate_dims("data initialization", "gamma_epsilon", "double", context__.to_vec());
            gamma_epsilon = double(0);
            vals_r__ = context__.vals_r("gamma_epsilon");
            pos__ = 0;
            gamma_epsilon = vals_r__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "min_sigma", "double", context__.to_vec());
            min_sigma = double(0);
            vals_r__ = context__.vals_r("min_sigma");
            pos__ = 0;
            min_sigma = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"N",N,1);
            current_statement_begin__ = 9;
            check_greater_or_equal(function__,"Npairs",Npairs,1);
            current_statement_begin__ = 10;
            for (int k0__ = 0; k0__ < Npairs; ++k0__) {
                check_greater_or_equal(function__,"i_idx[k0__]",i_idx[k0__],1);
            }
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < Npairs; ++k0__) {
                check_greater_or_equal(function__,"j_idx[k0__]",j_idx[k0__],1);
            }
            current_statement_begin__ = 12;
            check_greater_or_equal(function__,"dvec",dvec,0);
            current_statement_begin__ = 13;
            check_greater_or_equal(function__,"rel_sd",rel_sd,0);
            current_statement_begin__ = 16;
            check_greater_or_equal(function__,"gamma_tau",gamma_tau,0);
            current_statement_begin__ = 17;
            check_greater_or_equal(function__,"gamma_bias",gamma_bias,0);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"gamma_rho",gamma_rho,0);
            current_statement_begin__ = 19;
            check_greater_or_equal(function__,"gamma_epsilon",gamma_epsilon,0);
            current_statement_begin__ = 20;
            check_greater_or_equal(function__,"min_sigma",min_sigma,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 24;
            ++num_params_r__;
            current_statement_begin__ = 25;
            ++num_params_r__;
            current_statement_begin__ = 26;
            ++num_params_r__;
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 28;
            ++num_params_r__;
            current_statement_begin__ = 29;
            validate_non_negative_index("tau", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_buds() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("tau_shape1")))
            throw std::runtime_error("variable tau_shape1 missing");
        vals_r__ = context__.vals_r("tau_shape1");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_shape1", "double", context__.to_vec());
        double tau_shape1(0);
        tau_shape1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_shape1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_shape1: ") + e.what());
        }

        if (!(context__.contains_r("tau_shape2")))
            throw std::runtime_error("variable tau_shape2 missing");
        vals_r__ = context__.vals_r("tau_shape2");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau_shape2", "double", context__.to_vec());
        double tau_shape2(0);
        tau_shape2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau_shape2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau_shape2: ") + e.what());
        }

        if (!(context__.contains_r("bias")))
            throw std::runtime_error("variable bias missing");
        vals_r__ = context__.vals_r("bias");
        pos__ = 0U;
        context__.validate_dims("initialization", "bias", "double", context__.to_vec());
        double bias(0);
        bias = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,bias);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bias: ") + e.what());
        }

        if (!(context__.contains_r("rho")))
            throw std::runtime_error("variable rho missing");
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,rho);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho: ") + e.what());
        }

        if (!(context__.contains_r("meansd")))
            throw std::runtime_error("variable meansd missing");
        vals_r__ = context__.vals_r("meansd");
        pos__ = 0U;
        context__.validate_dims("initialization", "meansd", "double", context__.to_vec());
        double meansd(0);
        meansd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(min_sigma,meansd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable meansd: ") + e.what());
        }

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "N", N);
        context__.validate_dims("initialization", "tau", "double", context__.to_vec(N));
        std::vector<double> tau(N,double(0));
        for (int i0__ = 0U; i0__ < N; ++i0__)
            tau[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N; ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,1,tau[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ tau_shape1;
            (void) tau_shape1;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_shape1 = in__.scalar_lb_constrain(0,lp__);
            else
                tau_shape1 = in__.scalar_lb_constrain(0);

            local_scalar_t__ tau_shape2;
            (void) tau_shape2;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_shape2 = in__.scalar_lb_constrain(0,lp__);
            else
                tau_shape2 = in__.scalar_lb_constrain(0);

            local_scalar_t__ bias;
            (void) bias;  // dummy to suppress unused var warning
            if (jacobian__)
                bias = in__.scalar_lb_constrain(0,lp__);
            else
                bias = in__.scalar_lb_constrain(0);

            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lb_constrain(0,lp__);
            else
                rho = in__.scalar_lb_constrain(0);

            local_scalar_t__ meansd;
            (void) meansd;  // dummy to suppress unused var warning
            if (jacobian__)
                meansd = in__.scalar_lb_constrain(min_sigma,lp__);
            else
                meansd = in__.scalar_lb_constrain(min_sigma);

            vector<local_scalar_t__> tau;
            size_t dim_tau_0__ = N;
            tau.reserve(dim_tau_0__);
            for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
                if (jacobian__)
                    tau.push_back(in__.scalar_lub_constrain(0,1,lp__));
                else
                    tau.push_back(in__.scalar_lub_constrain(0,1));
            }


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 33;
            local_scalar_t__ sig_sq;
            (void) sig_sq;  // dummy to suppress unused var warning

            stan::math::initialize(sig_sq, DUMMY_VAR__);
            stan::math::fill(sig_sq,DUMMY_VAR__);
            current_statement_begin__ = 34;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning

            stan::math::initialize(alpha, DUMMY_VAR__);
            stan::math::fill(alpha,DUMMY_VAR__);
            current_statement_begin__ = 35;
            local_scalar_t__ beta;
            (void) beta;  // dummy to suppress unused var warning

            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("delta", "Npairs", Npairs);
            Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  delta(static_cast<Eigen::VectorXd::Index>(Npairs));
            (void) delta;  // dummy to suppress unused var warning

            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta,DUMMY_VAR__);


            current_statement_begin__ = 38;
            lp_accum__.add(cauchy_log<propto__>(tau_shape1, 1, gamma_tau));
            current_statement_begin__ = 39;
            lp_accum__.add(cauchy_log<propto__>(tau_shape2, 1, gamma_tau));
            current_statement_begin__ = 40;
            lp_accum__.add(cauchy_log<propto__>(bias, 0, gamma_bias));
            current_statement_begin__ = 41;
            lp_accum__.add(cauchy_log<propto__>(rho, 1, gamma_rho));
            current_statement_begin__ = 42;
            lp_accum__.add(cauchy_log<propto__>(meansd, 0, gamma_epsilon));
            current_statement_begin__ = 44;
            for (int n = 1; n <= N; ++n) {

                current_statement_begin__ = 45;
                lp_accum__.add(beta_log<propto__>(get_base1(tau,n,"tau",1), tau_shape1, tau_shape2));
            }
            current_statement_begin__ = 48;
            for (int kdx = 1; kdx <= Npairs; ++kdx) {

                current_statement_begin__ = 49;
                stan::model::assign(delta, 
                            stan::model::cons_list(stan::model::index_uni(kdx), stan::model::nil_index_list()), 
                            (bias + (rho * stan::math::fabs((get_base1(tau,get_base1(i_idx,kdx,"i_idx",1),"tau",1) - get_base1(tau,get_base1(j_idx,kdx,"j_idx",1),"tau",1))))), 
                            "assigning variable delta");
                current_statement_begin__ = 50;
                stan::math::assign(sig_sq, pow(stan::math::fmax((meansd * get_base1(rel_sd,kdx,"rel_sd",1)),min_sigma),2));
                current_statement_begin__ = 51;
                stan::math::assign(alpha, (pow(get_base1(delta,kdx,"delta",1),2) / sig_sq));
                current_statement_begin__ = 52;
                stan::math::assign(beta, (get_base1(delta,kdx,"delta",1) / sig_sq));
                current_statement_begin__ = 53;
                lp_accum__.add(gamma_log<propto__>(get_base1(dvec,kdx,"dvec",1), alpha, beta));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau_shape1");
        names__.push_back("tau_shape2");
        names__.push_back("bias");
        names__.push_back("rho");
        names__.push_back("meansd");
        names__.push_back("tau");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_buds_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double tau_shape1 = in__.scalar_lb_constrain(0);
        double tau_shape2 = in__.scalar_lb_constrain(0);
        double bias = in__.scalar_lb_constrain(0);
        double rho = in__.scalar_lb_constrain(0);
        double meansd = in__.scalar_lb_constrain(min_sigma);
        vector<double> tau;
        size_t dim_tau_0__ = N;
        for (size_t k_0__ = 0; k_0__ < dim_tau_0__; ++k_0__) {
            tau.push_back(in__.scalar_lub_constrain(0,1));
        }
        vars__.push_back(tau_shape1);
        vars__.push_back(tau_shape2);
        vars__.push_back(bias);
        vars__.push_back(rho);
        vars__.push_back(meansd);
            for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(tau[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_buds";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bias";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "meansd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_shape1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau_shape2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bias";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "meansd";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_buds_namespace::model_buds stan_model;


#endif
